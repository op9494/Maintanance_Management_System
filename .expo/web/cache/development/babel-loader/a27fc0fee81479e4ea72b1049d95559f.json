{"ast":null,"code":"import NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar ReactNativeExceptionHandler = NativeModules.ReactNativeExceptionHandler;\n\nvar noop = function noop() {};\n\nexport var setJSExceptionHandler = function setJSExceptionHandler() {\n  var customHandler = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : noop;\n  var allowedInDevMode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  if (typeof allowedInDevMode !== \"boolean\" || typeof customHandler !== \"function\") {\n    console.log(\"setJSExceptionHandler is called with wrong argument types.. first argument should be callback function and second argument is optional should be a boolean\");\n    console.log(\"Not setting the JS handler .. please fix setJSExceptionHandler call\");\n    return;\n  }\n\n  var allowed = allowedInDevMode ? true : !__DEV__;\n\n  if (allowed) {\n    global.ErrorUtils.setGlobalHandler(customHandler);\n\n    console.error = function (message, error) {\n      return global.ErrorUtils.reportError(error);\n    };\n  } else {\n    console.log(\"Skipping setJSExceptionHandler: Reason: In DEV mode and allowedInDevMode = false\");\n  }\n};\nexport var getJSExceptionHandler = function getJSExceptionHandler() {\n  return global.ErrorUtils.getGlobalHandler();\n};\nexport var setNativeExceptionHandler = function setNativeExceptionHandler() {\n  var customErrorHandler = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : noop;\n  var forceApplicationToQuit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var executeDefaultHandler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (typeof customErrorHandler !== \"function\" || typeof forceApplicationToQuit !== \"boolean\") {\n    console.log(\"setNativeExceptionHandler is called with wrong argument types.. first argument should be callback function and second argument is optional should be a boolean\");\n    console.log(\"Not setting the native handler .. please fix setNativeExceptionHandler call\");\n    return;\n  }\n\n  if (Platform.OS === \"ios\") {\n    ReactNativeExceptionHandler.setHandlerforNativeException(executeDefaultHandler, customErrorHandler);\n  } else {\n    ReactNativeExceptionHandler.setHandlerforNativeException(executeDefaultHandler, forceApplicationToQuit, customErrorHandler);\n  }\n};\nexport default {\n  setJSExceptionHandler: setJSExceptionHandler,\n  getJSExceptionHandler: getJSExceptionHandler,\n  setNativeExceptionHandler: setNativeExceptionHandler\n};","map":{"version":3,"sources":["/home/op-pro/Desktop/Finalyear project/Admin/node_modules/react-native-exception-handler/index.js"],"names":["ReactNativeExceptionHandler","NativeModules","noop","setJSExceptionHandler","customHandler","allowedInDevMode","console","log","allowed","__DEV__","global","ErrorUtils","setGlobalHandler","error","message","reportError","getJSExceptionHandler","getGlobalHandler","setNativeExceptionHandler","customErrorHandler","forceApplicationToQuit","executeDefaultHandler","Platform","OS","setHandlerforNativeException"],"mappings":";;IAEQA,2B,GAAgCC,a,CAAhCD,2B;;AAER,IAAME,IAAI,GAAG,SAAPA,IAAO,GAAM,CAAG,CAAtB;;AAEA,OAAO,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,GAAoD;AAAA,MAAnDC,aAAmD,uEAAnCF,IAAmC;AAAA,MAA7BG,gBAA6B,uEAAV,KAAU;;AACvF,MAAI,OAAOA,gBAAP,KAA4B,SAA5B,IAAyC,OAAOD,aAAP,KAAyB,UAAtE,EAAiF;AAC/EE,IAAAA,OAAO,CAACC,GAAR,CAAY,4JAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,qEAAZ;AACA;AACD;;AACD,MAAMC,OAAO,GAAGH,gBAAgB,GAAG,IAAH,GAAU,CAACI,OAA3C;;AACA,MAAID,OAAJ,EAAa;AACXE,IAAAA,MAAM,CAACC,UAAP,CAAkBC,gBAAlB,CAAmCR,aAAnC;;AACAE,IAAAA,OAAO,CAACO,KAAR,GAAgB,UAACC,OAAD,EAAUD,KAAV;AAAA,aAAoBH,MAAM,CAACC,UAAP,CAAkBI,WAAlB,CAA8BF,KAA9B,CAApB;AAAA,KAAhB;AACD,GAHD,MAGO;AACLP,IAAAA,OAAO,CAACC,GAAR,CAAY,kFAAZ;AACD;AACF,CAbM;AAeP,OAAO,IAAMS,qBAAqB,GAAG,SAAxBA,qBAAwB;AAAA,SAAMN,MAAM,CAACC,UAAP,CAAkBM,gBAAlB,EAAN;AAAA,CAA9B;AAEP,OAAO,IAAMC,yBAAyB,GAAG,SAA5BA,yBAA4B,GAA6F;AAAA,MAA5FC,kBAA4F,uEAAvEjB,IAAuE;AAAA,MAAjEkB,sBAAiE,uEAAxC,IAAwC;AAAA,MAAlCC,qBAAkC,uEAAV,KAAU;;AACpI,MAAI,OAAOF,kBAAP,KAA8B,UAA9B,IAA4C,OAAOC,sBAAP,KAAkC,SAAlF,EAA6F;AAC3Fd,IAAAA,OAAO,CAACC,GAAR,CAAY,gKAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,6EAAZ;AACA;AACD;;AACD,MAAIe,QAAQ,CAACC,EAAT,KAAgB,KAApB,EAA2B;AACzBvB,IAAAA,2BAA2B,CAACwB,4BAA5B,CAAyDH,qBAAzD,EAAgFF,kBAAhF;AACD,GAFD,MAEO;AACLnB,IAAAA,2BAA2B,CAACwB,4BAA5B,CAAyDH,qBAAzD,EAAgFD,sBAAhF,EAAwGD,kBAAxG;AACD;AACF,CAXM;AAaP,eAAe;AACbhB,EAAAA,qBAAqB,EAArBA,qBADa;AAEba,EAAAA,qBAAqB,EAArBA,qBAFa;AAGbE,EAAAA,yBAAyB,EAAzBA;AAHa,CAAf","sourcesContent":["import { NativeModules, Platform } from \"react-native\";\n\nconst { ReactNativeExceptionHandler } = NativeModules;\n\nconst noop = () => { };\n\nexport const setJSExceptionHandler = (customHandler = noop, allowedInDevMode = false) => {\n  if (typeof allowedInDevMode !== \"boolean\" || typeof customHandler !== \"function\"){\n    console.log(\"setJSExceptionHandler is called with wrong argument types.. first argument should be callback function and second argument is optional should be a boolean\");\n    console.log(\"Not setting the JS handler .. please fix setJSExceptionHandler call\");\n    return;\n  }\n  const allowed = allowedInDevMode ? true : !__DEV__;\n  if (allowed) {\n    global.ErrorUtils.setGlobalHandler(customHandler);\n    console.error = (message, error) => global.ErrorUtils.reportError(error); // sending console.error so that it can be caught\n  } else {\n    console.log(\"Skipping setJSExceptionHandler: Reason: In DEV mode and allowedInDevMode = false\");\n  }\n};\n\nexport const getJSExceptionHandler = () => global.ErrorUtils.getGlobalHandler();\n\nexport const setNativeExceptionHandler = (customErrorHandler = noop, forceApplicationToQuit = true, executeDefaultHandler = false) => {\n  if (typeof customErrorHandler !== \"function\" || typeof forceApplicationToQuit !== \"boolean\") {\n    console.log(\"setNativeExceptionHandler is called with wrong argument types.. first argument should be callback function and second argument is optional should be a boolean\");\n    console.log(\"Not setting the native handler .. please fix setNativeExceptionHandler call\");\n    return;\n  }\n  if (Platform.OS === \"ios\") {\n    ReactNativeExceptionHandler.setHandlerforNativeException(executeDefaultHandler, customErrorHandler);\n  } else {\n    ReactNativeExceptionHandler.setHandlerforNativeException(executeDefaultHandler, forceApplicationToQuit, customErrorHandler);\n  }\n};\n\nexport default {\n  setJSExceptionHandler,\n  getJSExceptionHandler,\n  setNativeExceptionHandler\n};\n"]},"metadata":{},"sourceType":"module"}