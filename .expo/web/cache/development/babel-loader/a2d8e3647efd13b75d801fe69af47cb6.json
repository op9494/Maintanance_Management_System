{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/op-pro/Desktop/Finalyear project/Admin/src/screens/AdminForgotPasswordScreen.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { memo, useState } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { emailValidator } from \"../core/utils\";\nimport Background from \"../components/Background\";\nimport BackButton from \"../components/BackButton\";\nimport Logo from \"../components/Logo\";\nimport { Header } from 'react-native-elements';\nimport TextInput from \"../components/TextInput\";\nimport { theme } from \"../core/theme\";\nimport Button from \"../components/Button\";\nimport { sendEmailWithPassword } from \"../api/auth-api\";\nimport Toast from \"../components/Toast\";\n\nvar AdminForgotPasswordScreen = function AdminForgotPasswordScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState({\n    value: \"\",\n    error: \"\"\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var _useState5 = useState({\n    value: \"\",\n    type: \"\"\n  }),\n      _useState6 = _slicedToArray(_useState5, 2),\n      toast = _useState6[0],\n      setToast = _useState6[1];\n\n  var _onSendPressed = function _onSendPressed() {\n    var emailError, response;\n    return _regeneratorRuntime.async(function _onSendPressed$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!loading) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 2:\n            emailError = emailValidator(email.value);\n\n            if (!emailError) {\n              _context.next = 6;\n              break;\n            }\n\n            setEmail(_objectSpread({}, email, {\n              error: emailError\n            }));\n            return _context.abrupt(\"return\");\n\n          case 6:\n            setLoading(true);\n            _context.next = 9;\n            return _regeneratorRuntime.awrap(sendEmailWithPassword(email.value));\n\n          case 9:\n            response = _context.sent;\n\n            if (response.error) {\n              setToast({\n                type: \"error\",\n                value: response.error\n              });\n            } else {\n              setToast({\n                type: \"success\",\n                value: \"Email with password has been sent.\"\n              });\n            }\n\n            setLoading(false);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  };\n\n  return React.createElement(Background, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    }\n  }, React.createElement(Header, {\n    backgroundColor: \"#F6820D\",\n    leftComponent: React.createElement(BackButton, {\n      goBack: function goBack() {\n        return navigation.navigate(\"AdminDashboard\");\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      }\n    }),\n    centerComponent: {\n      text: 'Restore Password'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    }\n  }), React.createElement(TextInput, {\n    label: \"E-mail address\",\n    returnKeyType: \"done\",\n    value: email.value,\n    onChangeText: function onChangeText(text) {\n      return setEmail({\n        value: text,\n        error: \"\"\n      });\n    },\n    error: !!email.error,\n    errorText: email.error,\n    autoCapitalize: \"none\",\n    autoCompleteType: \"email\",\n    textContentType: \"emailAddress\",\n    keyboardType: \"email-address\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    }\n  }), React.createElement(Button, {\n    loading: loading,\n    mode: \"contained\",\n    onPress: _onSendPressed,\n    style: styles.button,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    }\n  }, \"Send Reset Instructions\"), React.createElement(Toast, {\n    type: toast.type,\n    message: toast.value,\n    onDismiss: function onDismiss() {\n      return setToast({\n        value: \"\",\n        type: \"\"\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    }\n  }));\n};\n\nvar styles = StyleSheet.create({\n  back: {\n    width: \"100%\",\n    marginTop: 12\n  },\n  button: {\n    marginTop: 12\n  },\n  label: {\n    color: theme.colors.secondary,\n    width: \"100%\"\n  }\n});\nexport default memo(AdminForgotPasswordScreen);","map":{"version":3,"sources":["/home/op-pro/Desktop/Finalyear project/Admin/src/screens/AdminForgotPasswordScreen.js"],"names":["React","memo","useState","emailValidator","Background","BackButton","Logo","Header","TextInput","theme","Button","sendEmailWithPassword","Toast","AdminForgotPasswordScreen","navigation","value","error","email","setEmail","loading","setLoading","type","toast","setToast","_onSendPressed","emailError","response","navigate","text","styles","button","StyleSheet","create","back","width","marginTop","label","color","colors","secondary"],"mappings":"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","sourcesContent":["import React, { memo, useState } from \"react\";\nimport { Text, StyleSheet, TouchableOpacity } from \"react-native\";\nimport { emailValidator } from \"../core/utils\";\nimport Background from \"../components/Background\";\nimport BackButton from \"../components/BackButton\";\nimport Logo from \"../components/Logo\";\nimport { Header } from 'react-native-elements';\nimport TextInput from \"../components/TextInput\";\nimport { theme } from \"../core/theme\";\nimport Button from \"../components/Button\";\nimport { sendEmailWithPassword } from \"../api/auth-api\";\nimport Toast from \"../components/Toast\";\n\nconst AdminForgotPasswordScreen = ({ navigation }) => {\n  const [email, setEmail] = useState({ value: \"\", error: \"\" });\n  const [loading, setLoading] = useState(false);\n  const [toast, setToast] = useState({ value: \"\", type: \"\" });\n\n  const _onSendPressed = async () => {\n    if (loading) return;\n\n    const emailError = emailValidator(email.value);\n\n    if (emailError) {\n      setEmail({ ...email, error: emailError });\n      return;\n    }\n\n    setLoading(true);\n\n    const response = await sendEmailWithPassword(email.value);\n\n    if (response.error) {\n      setToast({ type: \"error\", value: response.error });\n    } else {\n      setToast({\n        type: \"success\",\n        value: \"Email with password has been sent.\"\n      });\n    }\n\n    setLoading(false);\n  };\n\n  return (\n    <Background>\n<Header\n  backgroundColor='#F6820D'\n  leftComponent={<BackButton goBack={() => navigation.navigate(\"AdminDashboard\")} />}\n  centerComponent={{text:'Restore Password'}}/>   \n\n      <TextInput\n        label=\"E-mail address\"\n        returnKeyType=\"done\"\n        value={email.value}\n        onChangeText={text => setEmail({ value: text, error: \"\" })}\n        error={!!email.error}\n        errorText={email.error}\n        autoCapitalize=\"none\"\n        autoCompleteType=\"email\"\n        textContentType=\"emailAddress\"\n        keyboardType=\"email-address\"\n      />\n\n      <Button\n        loading={loading}\n        mode=\"contained\"\n        onPress={_onSendPressed}\n        style={styles.button}\n      >\n        Send Reset Instructions\n      </Button>\n\n      <Toast\n        type={toast.type}\n        message={toast.value}\n        onDismiss={() => setToast({ value: \"\", type: \"\" })}\n      />\n    </Background>\n  );\n};\n\nconst styles = StyleSheet.create({\n  back: {\n    width: \"100%\",\n    marginTop: 12\n  },\n  button: {\n    marginTop: 12\n  },\n  label: {\n    color: theme.colors.secondary,\n    width: \"100%\"\n  }\n});\n\nexport default memo(AdminForgotPasswordScreen);\n"]},"metadata":{},"sourceType":"module"}