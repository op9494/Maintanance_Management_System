{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _objectWithoutProperties2=_interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _possibleConstructorReturn2=_interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));var _getPrototypeOf2=_interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));var _inherits2=_interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));var _defineProperty2=_interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));var React=_interopRequireWildcard(require(\"react\"));var _reactNative=require(\"react-native-web/dist/index\");var _color=_interopRequireDefault(require(\"color\"));var _Text=_interopRequireDefault(require(\"../Typography/Text\"));var _theming=require(\"../../core/theming\");var _colors=require(\"../../styles/colors\");var _jsxFileName=\"/Users/trensik/dev/react-native-paper/src/components/Avatar/AvatarText.tsx\";var defaultSize=64;var AvatarText=function(_React$Component){(0,_inherits2.default)(AvatarText,_React$Component);function AvatarText(){(0,_classCallCheck2.default)(this,AvatarText);return(0,_possibleConstructorReturn2.default)(this,(0,_getPrototypeOf2.default)(AvatarText).apply(this,arguments));}(0,_createClass2.default)(AvatarText,[{key:\"render\",value:function render(){var _this$props=this.props,label=_this$props.label,_this$props$size=_this$props.size,size=_this$props$size===void 0?defaultSize:_this$props$size,style=_this$props.style,theme=_this$props.theme,labelStyle=_this$props.labelStyle,color=_this$props.color,rest=(0,_objectWithoutProperties2.default)(_this$props,[\"label\",\"size\",\"style\",\"theme\",\"labelStyle\",\"color\"]);var _ref=_reactNative.StyleSheet.flatten(style)||{},_ref$backgroundColor=_ref.backgroundColor,backgroundColor=_ref$backgroundColor===void 0?theme.colors.primary:_ref$backgroundColor,restStyle=(0,_objectWithoutProperties2.default)(_ref,[\"backgroundColor\"]);var textColor=color||((0,_color.default)(backgroundColor).isLight()?'rgba(0, 0, 0, .54)':_colors.white);return React.createElement(_reactNative.View,(0,_extends2.default)({style:[{width:size,height:size,borderRadius:size/2,backgroundColor:backgroundColor},styles.container,restStyle]},rest,{__source:{fileName:_jsxFileName,lineNumber:88}}),React.createElement(_Text.default,{style:[styles.text,{color:textColor,fontSize:size/2,lineHeight:size},labelStyle],numberOfLines:1,__source:{fileName:_jsxFileName,lineNumber:101}},label));}}]);return AvatarText;}(React.Component);(0,_defineProperty2.default)(AvatarText,\"displayName\",'Avatar.Text');(0,_defineProperty2.default)(AvatarText,\"defaultProps\",{size:defaultSize});var styles=_reactNative.StyleSheet.create({container:{justifyContent:'center',alignItems:'center'},text:{textAlign:'center',textAlignVertical:'center'}});var _default=(0,_theming.withTheme)(AvatarText);exports.default=_default;","map":{"version":3,"sources":["AvatarText.tsx"],"names":["defaultSize","AvatarText","React","Component","size","label","style","theme","labelStyle","color","rest","backgroundColor","restStyle","StyleSheet","textColor","white","width","height","borderRadius","styles","fontSize","lineHeight","container","justifyContent","alignItems","text","textAlign","textAlignVertical"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n} from 'react-native';\nimport Color from 'color';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport { white } from '../../styles/colors';\nimport { Theme } from '../../types';\n\nconst defaultSize = 64;\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Initials to show as the text in the `Avatar`.\n   */\n  label: string;\n  /**\n   * Size of the avatar.\n   */\n  size?: number;\n  /**\n   * Custom color for the text.\n   */\n  color?: string;\n  /**\n   * Style for text container\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style for the title.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * Avatars can be used to represent people in a graphical way.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/avatar-text.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Avatar.Text size={24} label=\"XD\" />\n * );\n * ```\n */\nclass AvatarText extends React.Component<Props> {\n  static displayName = 'Avatar.Text';\n\n  static defaultProps = {\n    size: defaultSize,\n  };\n\n  render() {\n    const {\n      label,\n      size = defaultSize,\n      style,\n      theme,\n      labelStyle,\n      color,\n      ...rest\n    } = this.props;\n\n    const { backgroundColor = theme.colors.primary, ...restStyle } =\n      StyleSheet.flatten(style) || {};\n    const textColor =\n      color ||\n      (Color(backgroundColor).isLight() ? 'rgba(0, 0, 0, .54)' : white);\n\n    return (\n      <View\n        style={[\n          {\n            width: size,\n            height: size,\n            borderRadius: size / 2,\n            backgroundColor,\n          },\n          styles.container,\n          restStyle,\n        ]}\n        {...rest}\n      >\n        <Text\n          style={[\n            styles.text,\n            {\n              color: textColor,\n              fontSize: size / 2,\n              lineHeight: size,\n            },\n            labelStyle,\n          ]}\n          numberOfLines={1}\n        >\n          {label}\n        </Text>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  text: {\n    textAlign: 'center',\n    textAlignVertical: 'center',\n  },\n});\n\nexport default withTheme(AvatarText);\n"]},"metadata":{},"sourceType":"script"}