{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.RadioButtonItem=exports.default=void 0;var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _possibleConstructorReturn2=_interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));var _getPrototypeOf2=_interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));var _inherits2=_interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));var _defineProperty2=_interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));var React=_interopRequireWildcard(require(\"react\"));var _reactNative=require(\"react-native-web/dist/index\");var _theming=require(\"../../core/theming\");var _RadioButtonGroup=require(\"./RadioButtonGroup\");var _utils=require(\"./utils\");var _TouchableRipple=_interopRequireDefault(require(\"../TouchableRipple\"));var _RadioButton=_interopRequireDefault(require(\"./RadioButton\"));var _Text=_interopRequireDefault(require(\"../Typography/Text\"));var _jsxFileName=\"/Users/trensik/dev/react-native-paper/src/components/RadioButton/RadioButtonItem.tsx\";var RadioButtonItem=function(_React$Component){(0,_inherits2.default)(RadioButtonItem,_React$Component);function RadioButtonItem(){(0,_classCallCheck2.default)(this,RadioButtonItem);return(0,_possibleConstructorReturn2.default)(this,(0,_getPrototypeOf2.default)(RadioButtonItem).apply(this,arguments));}(0,_createClass2.default)(RadioButtonItem,[{key:\"render\",value:function render(){var _this$props=this.props,value=_this$props.value,label=_this$props.label,style=_this$props.style,labelStyle=_this$props.labelStyle,onPress=_this$props.onPress,disabled=_this$props.disabled,color=_this$props.color,uncheckedColor=_this$props.uncheckedColor,status=_this$props.status,colors=_this$props.theme.colors;return React.createElement(_RadioButtonGroup.RadioButtonContext.Consumer,{__source:{fileName:_jsxFileName,lineNumber:113}},function(context){return React.createElement(_TouchableRipple.default,{onPress:disabled?undefined:function(){return(0,_utils.handlePress)({onPress:onPress,onValueChange:context===null||context===void 0?void 0:context.onValueChange,value:value});},__source:{fileName:_jsxFileName,lineNumber:116}},React.createElement(_reactNative.View,{style:[styles.container,style],pointerEvents:\"none\",__source:{fileName:_jsxFileName,lineNumber:128}},React.createElement(_Text.default,{style:[styles.label,{color:colors.text},labelStyle],__source:{fileName:_jsxFileName,lineNumber:129}},label),React.createElement(_RadioButton.default,{value:value,disabled:disabled,status:status,color:color,uncheckedColor:uncheckedColor,__source:{fileName:_jsxFileName,lineNumber:134}})));});}}]);return RadioButtonItem;}(React.Component);exports.RadioButtonItem=RadioButtonItem;(0,_defineProperty2.default)(RadioButtonItem,\"displayName\",'RadioButton.Item');var _default=(0,_theming.withTheme)(RadioButtonItem);exports.default=_default;var styles=_reactNative.StyleSheet.create({container:{flexDirection:'row',alignItems:'center',justifyContent:'space-between',paddingVertical:8,paddingHorizontal:16},label:{fontSize:16}});","map":{"version":3,"sources":["RadioButtonItem.tsx"],"names":["RadioButtonItem","React","Component","value","label","style","labelStyle","onPress","disabled","color","uncheckedColor","status","colors","onValueChange","context","styles","StyleSheet","container","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","fontSize"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n} from 'react-native';\nimport { Theme } from '../../types';\nimport { withTheme } from '../../core/theming';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress } from './utils';\nimport TouchableRipple from '../TouchableRipple';\nimport RadioButton from './RadioButton';\nimport Text from '../Typography/Text';\n\nexport type Props = {\n  /**\n   * Value of the radio button.\n   */\n  value: string;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * RadioButton.Item allows you to press the whole row (item) instead of only the RadioButton.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/radio-item.ios.png\" />\n *     <figcaption>Pressed</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { RadioButton, Text } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *   state = {\n *     value: 'first',\n *   };\n *\n *   render() {\n *     return(\n *       <RadioButton.Group\n *         onValueChange={value => this.setState({ value })}\n *         value={this.state.value}\n *       >\n *           <RadioButton.Item label=\"First item\" value=\"first\" />\n *           <RadioButton.Item label=\"Second item\" value=\"second\" />\n *       </RadioButton.Group>\n *     )\n *   }\n * }\n *```\n */\nclass RadioButtonItem extends React.Component<Props> {\n  static displayName = 'RadioButton.Item';\n\n  render() {\n    const {\n      value,\n      label,\n      style,\n      labelStyle,\n      onPress,\n      disabled,\n      color,\n      uncheckedColor,\n      status,\n      theme: { colors },\n    } = this.props;\n\n    return (\n      <RadioButtonContext.Consumer>\n        {(context?: RadioButtonContextType) => {\n          return (\n            <TouchableRipple\n              onPress={\n                disabled\n                  ? undefined\n                  : () =>\n                      handlePress({\n                        onPress: onPress,\n                        onValueChange: context?.onValueChange,\n                        value,\n                      })\n              }\n            >\n              <View style={[styles.container, style]} pointerEvents=\"none\">\n                <Text\n                  style={[styles.label, { color: colors.text }, labelStyle]}\n                >\n                  {label}\n                </Text>\n                <RadioButton\n                  value={value}\n                  disabled={disabled}\n                  status={status}\n                  color={color}\n                  uncheckedColor={uncheckedColor}\n                />\n              </View>\n            </TouchableRipple>\n          );\n        }}\n      </RadioButtonContext.Consumer>\n    );\n  }\n}\n\nexport default withTheme(RadioButtonItem);\n\n// @component-docs ignore-next-line\nexport { RadioButtonItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    fontSize: 16,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}