{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.CheckboxItem=exports.default=void 0;var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _objectWithoutProperties2=_interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _possibleConstructorReturn2=_interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));var _getPrototypeOf2=_interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));var _inherits2=_interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));var _defineProperty2=_interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));var React=_interopRequireWildcard(require(\"react\"));var _reactNative=require(\"react-native-web/dist/index\");var _Checkbox=_interopRequireDefault(require(\"./Checkbox\"));var _Text=_interopRequireDefault(require(\"../Typography/Text\"));var _TouchableRipple=_interopRequireDefault(require(\"../TouchableRipple\"));var _theming=require(\"../../core/theming\");var _jsxFileName=\"/Users/trensik/dev/react-native-paper/src/components/Checkbox/CheckboxItem.tsx\";var CheckboxItem=function(_React$Component){(0,_inherits2.default)(CheckboxItem,_React$Component);function CheckboxItem(){(0,_classCallCheck2.default)(this,CheckboxItem);return(0,_possibleConstructorReturn2.default)(this,(0,_getPrototypeOf2.default)(CheckboxItem).apply(this,arguments));}(0,_createClass2.default)(CheckboxItem,[{key:\"render\",value:function render(){var _this$props=this.props,style=_this$props.style,status=_this$props.status,label=_this$props.label,onPress=_this$props.onPress,labelStyle=_this$props.labelStyle,colors=_this$props.theme.colors,props=(0,_objectWithoutProperties2.default)(_this$props,[\"style\",\"status\",\"label\",\"onPress\",\"labelStyle\",\"theme\"]);return React.createElement(_TouchableRipple.default,{onPress:onPress,__source:{fileName:_jsxFileName,lineNumber:93}},React.createElement(_reactNative.View,{style:[styles.container,style],pointerEvents:\"none\",__source:{fileName:_jsxFileName,lineNumber:94}},React.createElement(_Text.default,{style:[styles.label,labelStyle,{color:colors.primary}],__source:{fileName:_jsxFileName,lineNumber:95}},label),React.createElement(_Checkbox.default,(0,_extends2.default)({status:status},props,{__source:{fileName:_jsxFileName,lineNumber:98}}))));}}]);return CheckboxItem;}(React.Component);exports.CheckboxItem=CheckboxItem;(0,_defineProperty2.default)(CheckboxItem,\"displayName\",'Checkbox.Item');var _default=(0,_theming.withTheme)(CheckboxItem);exports.default=_default;var styles=_reactNative.StyleSheet.create({container:{flexDirection:'row',alignItems:'center',justifyContent:'space-between',paddingVertical:8,paddingHorizontal:16},label:{fontSize:16}});","map":{"version":3,"sources":["CheckboxItem.tsx"],"names":["CheckboxItem","React","Component","style","status","label","onPress","labelStyle","colors","props","styles","color","StyleSheet","container","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","fontSize"],"mappings":"qgCAAA,GAAA,CAAA,KAAA,CAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA,C,wDAUA,GAAA,CAAA,SAAA,CAAA,sBAAA,CAAA,OAAA,cAAA,CAAA,CACA,GAAA,CAAA,KAAA,CAAA,sBAAA,CAAA,OAAA,sBAAA,CAAA,CAEA,GAAA,CAAA,gBAAA,CAAA,sBAAA,CAAA,OAAA,sBAAA,CAAA,CACA,GAAA,CAAA,QAAA,CAAA,OAAA,sBAAA,C,kGA+DMA,GAAAA,CAAAA,Y,6VAGK,CAAA,GAAA,CAAA,WAAA,CASH,KATG,KAAA,CAELG,KAFK,CAAA,WAAA,CAAA,KAAA,CAGLC,MAHK,CAAA,WAAA,CAAA,MAAA,CAILC,KAJK,CAAA,WAAA,CAAA,KAAA,CAKLC,OALK,CAAA,WAAA,CAAA,OAAA,CAMLC,UANK,CAAA,WAAA,CAAA,UAAA,CAOIC,MAPJ,CAAA,WAAA,CAAA,KAAA,CAAA,MAAA,CAQFC,KARE,CAAA,CAAA,EAAA,yBAAA,CAAA,OAAA,EAAA,WAAA,CAAA,CAAA,OAAA,CAAA,QAAA,CAAA,OAAA,CAAA,SAAA,CAAA,YAAA,CAAA,OAAA,CAAA,CAAA,CAWP,MACE,CAAA,KAAA,CAAA,aAAA,CAAC,gBAAA,CAAD,OAAA,CAAA,CAAiB,OAAO,CAAxB,OAAA,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CAAA,EAAA,CAAA,CAAA,CACE,KAAA,CAAA,aAAA,CAAC,YAAA,CAAD,IAAA,CAAA,CAAM,KAAK,CAAE,CAACC,MAAM,CAAP,SAAA,CAAb,KAAa,CAAb,CAAwC,aAAa,CAArD,MAAA,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CAAA,EAAA,CAAA,CAAA,CACE,KAAA,CAAA,aAAA,CAAC,KAAA,CAAD,OAAA,CAAA,CAAM,KAAK,CAAE,CAACA,MAAM,CAAP,KAAA,CAAA,UAAA,CAA2B,CAAEC,KAAK,CAAEH,MAAM,CAAvD,OAAwC,CAA3B,CAAb,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CAAA,EAAA,CAAA,CAAA,CADF,KACE,CADF,CAIE,KAAA,CAAA,aAAA,CAAC,SAAA,CAAD,OAAA,CAAA,CAAA,EAAA,SAAA,CAAA,OAAA,EAAA,CAAU,MAAM,CAAhB,MAAA,CAAA,CAAA,KAAA,CAAA,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CANN,EAMM,CAAA,CAAA,CAAA,CAJF,CADF,CADF,C,2BAduBP,KAAK,CAACC,S,CAA3BF,C,+DAAAA,Y,eACiB,e,eA0BR,CAAA,EAAA,QAAA,CAAA,SAAA,EAAA,YAAA,C,0BAKf,GAAMU,CAAAA,MAAM,CAAGE,YAAAA,CAAAA,UAAAA,CAAAA,MAAAA,CAAkB,CAC/BC,SAAS,CAAE,CACTC,aAAa,CADJ,KAAA,CAETC,UAAU,CAFD,QAAA,CAGTC,cAAc,CAHL,eAAA,CAITC,eAAe,CAJN,CAAA,CAKTC,iBAAiB,CANY,EACpB,CADoB,CAQ/Bb,KAAK,CAAE,CACLc,QAAQ,CATZ,EAQS,CARwB,CAAlBP,CAAf","sourcesContent":["import * as React from 'react';\n\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport CheckBox from './Checkbox';\nimport Text from '../Typography/Text';\nimport { Theme } from '../../types';\nimport TouchableRipple from '../TouchableRipple';\nimport { withTheme } from '../../core/theming';\n\ntype Props = {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * Checkbox.Item allows you to press the whole row (item) instead of only the Checkbox.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Checkbox, Text } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *\n *   render() {\n *     return(\n *       <View>\n *           <Checkbox.Item label=\"Item\" status=\"checked\" />\n *       </View>\n *     )\n *   }\n * }\n *```\n */\n\nclass CheckboxItem extends React.Component<Props> {\n  static displayName = 'Checkbox.Item';\n\n  render() {\n    const {\n      style,\n      status,\n      label,\n      onPress,\n      labelStyle,\n      theme: { colors },\n      ...props\n    } = this.props;\n\n    return (\n      <TouchableRipple onPress={onPress}>\n        <View style={[styles.container, style]} pointerEvents=\"none\">\n          <Text style={[styles.label, labelStyle, { color: colors.primary }]}>\n            {label}\n          </Text>\n          <CheckBox status={status} {...props}></CheckBox>\n        </View>\n      </TouchableRipple>\n    );\n  }\n}\n\nexport default withTheme(CheckboxItem);\n\n// @component-docs ignore-next-line\nexport { CheckboxItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    fontSize: 16,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}