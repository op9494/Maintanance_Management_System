{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.CheckboxIOS=exports.default=void 0;var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _objectWithoutProperties2=_interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _possibleConstructorReturn2=_interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));var _getPrototypeOf2=_interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));var _inherits2=_interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));var _defineProperty2=_interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));var React=_interopRequireWildcard(require(\"react\"));var _reactNative=require(\"react-native-web/dist/index\");var _color=_interopRequireDefault(require(\"color\"));var _MaterialCommunityIcon=_interopRequireDefault(require(\"../MaterialCommunityIcon\"));var _TouchableRipple=_interopRequireDefault(require(\"../TouchableRipple\"));var _theming=require(\"../../core/theming\");var _jsxFileName=\"/Users/trensik/dev/react-native-paper/src/components/Checkbox/CheckboxIOS.tsx\";var CheckboxIOS=function(_React$Component){(0,_inherits2.default)(CheckboxIOS,_React$Component);function CheckboxIOS(){(0,_classCallCheck2.default)(this,CheckboxIOS);return(0,_possibleConstructorReturn2.default)(this,(0,_getPrototypeOf2.default)(CheckboxIOS).apply(this,arguments));}(0,_createClass2.default)(CheckboxIOS,[{key:\"render\",value:function render(){var _this$props=this.props,status=_this$props.status,disabled=_this$props.disabled,onPress=_this$props.onPress,theme=_this$props.theme,rest=(0,_objectWithoutProperties2.default)(_this$props,[\"status\",\"disabled\",\"onPress\",\"theme\"]);var checked=status==='checked';var indeterminate=status==='indeterminate';var checkedColor=disabled?theme.colors.disabled:this.props.color||theme.colors.accent;var rippleColor;if(disabled){rippleColor=(0,_color.default)(theme.colors.text).alpha(0.16).rgb().string();}else{rippleColor=(0,_color.default)(checkedColor).fade(0.32).rgb().string();}var icon=indeterminate?'minus':'check';return React.createElement(_TouchableRipple.default,(0,_extends2.default)({},rest,{borderless:true,rippleColor:rippleColor,onPress:onPress,disabled:disabled,accessibilityTraits:disabled?['button','disabled']:'button',accessibilityComponentType:\"button\",accessibilityRole:\"button\",accessibilityStates:disabled?['disabled']:[],accessibilityLiveRegion:\"polite\",style:styles.container,__source:{fileName:_jsxFileName,lineNumber:76}}),React.createElement(_reactNative.View,{style:{opacity:indeterminate||checked?1:0},__source:{fileName:_jsxFileName,lineNumber:89}},React.createElement(_MaterialCommunityIcon.default,{allowFontScaling:false,name:icon,size:24,color:checkedColor,direction:\"ltr\",__source:{fileName:_jsxFileName,lineNumber:90}})));}}]);return CheckboxIOS;}(React.Component);exports.CheckboxIOS=CheckboxIOS;(0,_defineProperty2.default)(CheckboxIOS,\"displayName\",'Checkbox.IOS');var styles=_reactNative.StyleSheet.create({container:{borderRadius:18,padding:6}});var _default=(0,_theming.withTheme)(CheckboxIOS);exports.default=_default;","map":{"version":3,"sources":["CheckboxIOS.tsx"],"names":["CheckboxIOS","React","Component","status","disabled","onPress","theme","rest","checked","indeterminate","checkedColor","rippleColor","icon","styles","opacity","StyleSheet","container","borderRadius","padding"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport color from 'color';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport { Theme, $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for iOS.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nclass CheckboxIOS extends React.Component<Props> {\n  static displayName = 'Checkbox.IOS';\n\n  render() {\n    const { status, disabled, onPress, theme, ...rest } = this.props;\n    const checked = status === 'checked';\n    const indeterminate = status === 'indeterminate';\n\n    const checkedColor = disabled\n      ? theme.colors.disabled\n      : this.props.color || theme.colors.accent;\n\n    let rippleColor;\n\n    if (disabled) {\n      rippleColor = color(theme.colors.text)\n        .alpha(0.16)\n        .rgb()\n        .string();\n    } else {\n      rippleColor = color(checkedColor)\n        .fade(0.32)\n        .rgb()\n        .string();\n    }\n\n    const icon = indeterminate ? 'minus' : 'check';\n\n    return (\n      <TouchableRipple\n        {...rest}\n        borderless\n        rippleColor={rippleColor}\n        onPress={onPress}\n        disabled={disabled}\n        accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityStates={disabled ? ['disabled'] : []}\n        accessibilityLiveRegion=\"polite\"\n        style={styles.container}\n      >\n        <View style={{ opacity: indeterminate || checked ? 1 : 0 }}>\n          <MaterialCommunityIcon\n            allowFontScaling={false}\n            name={icon}\n            size={24}\n            color={checkedColor}\n            direction=\"ltr\"\n          />\n        </View>\n      </TouchableRipple>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6,\n  },\n});\n\nexport default withTheme(CheckboxIOS);\n\n// @component-docs ignore-next-line\nexport { CheckboxIOS };\n"]},"metadata":{},"sourceType":"script"}