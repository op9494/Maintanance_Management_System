{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _possibleConstructorReturn2=_interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));var _getPrototypeOf2=_interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));var _inherits2=_interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));var _defineProperty2=_interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));var React=_interopRequireWildcard(require(\"react\"));var _reactNative=require(\"react-native-web/dist/index\");var _Modal=_interopRequireDefault(require(\"../Modal\"));var _DialogContent=_interopRequireDefault(require(\"./DialogContent\"));var _DialogActions=_interopRequireDefault(require(\"./DialogActions\"));var _DialogTitle2=_interopRequireDefault(require(\"./DialogTitle\"));var _DialogScrollArea=_interopRequireDefault(require(\"./DialogScrollArea\"));var _theming=require(\"../../core/theming\");var _jsxFileName=\"/Users/trensik/dev/react-native-paper/src/components/Dialog/Dialog.tsx\";var Dialog=function(_React$Component){(0,_inherits2.default)(Dialog,_React$Component);function Dialog(){(0,_classCallCheck2.default)(this,Dialog);return(0,_possibleConstructorReturn2.default)(this,(0,_getPrototypeOf2.default)(Dialog).apply(this,arguments));}(0,_createClass2.default)(Dialog,[{key:\"render\",value:function render(){var _this$props=this.props,children=_this$props.children,dismissable=_this$props.dismissable,onDismiss=_this$props.onDismiss,visible=_this$props.visible,style=_this$props.style,theme=_this$props.theme;return React.createElement(_Modal.default,{dismissable:dismissable,onDismiss:onDismiss,visible:visible,contentContainerStyle:[{borderRadius:theme.roundness,backgroundColor:theme.colors.surface},styles.container,style],__source:{fileName:_jsxFileName,lineNumber:109}},React.Children.toArray(children).filter(function(child){return child!=null&&typeof child!=='boolean';}).map(function(child,i){if(i===0&&React.isValidElement(child)&&child.type===_DialogContent.default){return React.cloneElement(child,{style:[{paddingTop:24},child.props.style]});}return child;}));}}]);return Dialog;}(React.Component);(0,_defineProperty2.default)(Dialog,\"Content\",_DialogContent.default);(0,_defineProperty2.default)(Dialog,\"Actions\",_DialogActions.default);(0,_defineProperty2.default)(Dialog,\"Title\",_DialogTitle2.default);(0,_defineProperty2.default)(Dialog,\"ScrollArea\",_DialogScrollArea.default);(0,_defineProperty2.default)(Dialog,\"defaultProps\",{dismissable:true,visible:false});var styles=_reactNative.StyleSheet.create({container:{marginVertical:_reactNative.Platform.OS==='android'?44:0,marginHorizontal:26,elevation:24,justifyContent:'flex-start'}});var _default=(0,_theming.withTheme)(Dialog);exports.default=_default;","map":{"version":3,"sources":["Dialog.tsx"],"names":["Dialog","React","Component","DialogContent","DialogActions","DialogTitle","DialogScrollArea","dismissable","visible","children","onDismiss","style","theme","borderRadius","backgroundColor","styles","child","i","paddingTop","StyleSheet","container","marginVertical","Platform","marginHorizontal","elevation","justifyContent"],"mappings":"gzBAAA,GAAA,CAAA,KAAA,CAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA,C,wDAEA,GAAA,CAAA,MAAA,CAAA,sBAAA,CAAA,OAAA,YAAA,CAAA,CACA,GAAA,CAAA,cAAA,CAAA,sBAAA,CAAA,OAAA,mBAAA,CAAA,CACA,GAAA,CAAA,cAAA,CAAA,sBAAA,CAAA,OAAA,mBAAA,CAAA,CAEA,GAAA,CAAA,aAAA,CAAA,sBAAA,CAAA,OAAA,iBAAA,CAAA,CACA,GAAA,CAAA,iBAAA,CAAA,sBAAA,CAAA,OAAA,sBAAA,CAAA,CACA,GAAA,CAAA,QAAA,CAAA,OAAA,sBAAA,C,0FA0EMA,GAAAA,CAAAA,M,+TAeK,CAAA,GAAA,CAAA,WAAA,CAQH,KARG,KAAA,CAELS,QAFK,CAAA,WAAA,CAAA,QAAA,CAGLF,WAHK,CAAA,WAAA,CAAA,WAAA,CAILG,SAJK,CAAA,WAAA,CAAA,SAAA,CAKLF,OALK,CAAA,WAAA,CAAA,OAAA,CAMLG,KANK,CAAA,WAAA,CAAA,KAAA,CAOLC,KAPK,CAAA,WAAA,CAAA,KAAA,CAUP,MACE,CAAA,KAAA,CAAA,aAAA,CAAC,MAAA,CAAD,OAAA,CAAA,CACE,WAAW,CADb,WAAA,CAEE,SAAS,CAFX,SAAA,CAGE,OAAO,CAHT,OAAA,CAIE,qBAAqB,CAAE,CACrB,CACEC,YAAY,CAAED,KAAK,CADrB,SAAA,CAEEE,eAAe,CAAEF,KAAK,CAALA,MAAAA,CAHE,OACrB,CADqB,CAKrBG,MAAM,CALe,SAAA,CAJzB,KAIyB,CAJzB,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,CAaGd,KAAK,CAALA,QAAAA,CAAAA,OAAAA,CAAAA,QAAAA,EAAAA,MAAAA,CACS,SAAA,KAAA,CAAK,CAAA,MAAIe,CAAAA,KAAK,EAALA,IAAAA,EAAiB,MAAA,CAAA,KAAA,GAArB,SAAA,CADdf,CAAAA,EAAAA,GAAAA,CAEM,SAAA,KAAA,CAAA,CAAA,CAAc,CACjB,GACEgB,CAAC,GAADA,CAAAA,EACAhB,KAAK,CAALA,cAAAA,CADAgB,KACAhB,CADAgB,EAEAD,KAAK,CAALA,IAAAA,GAAeb,cAAAA,CAHjB,OAAA,CAIE,CAEA,MAAOF,CAAAA,KAAK,CAALA,YAAAA,CAAAA,KAAAA,CAA0B,CAC/BU,KAAK,CAAE,CAAC,CAAEO,UAAU,CAAb,EAAC,CAAD,CAAqBF,KAAK,CAALA,KAAAA,CAD9B,KACS,CADwB,CAA1Bf,CAAP,CAKF,OAAA,CAAA,KAAA,CA5BR,CAcKA,CAbH,CADF,C,qBAzBiBA,KAAK,CAACC,S,CAArBF,C,6BAAAA,M,WAEaG,cAAAA,CAAAA,O,+BAFbH,M,WAIaI,cAAAA,CAAAA,O,+BAJbJ,M,SAMWK,aAAAA,CAAAA,O,+BANXL,M,cAQgBM,iBAAAA,CAAAA,O,+BARhBN,M,gBAUkB,CACpBO,WAAW,CADS,IAAA,CAEpBC,OAAO,CAFa,KAAA,C,EAkDxB,GAAMO,CAAAA,MAAM,CAAGI,YAAAA,CAAAA,UAAAA,CAAAA,MAAAA,CAAkB,CAC/BC,SAAS,CAAE,CAQTC,cAAc,CAAEC,YAAAA,CAAAA,QAAAA,CAAAA,EAAAA,GAAAA,SAAAA,CAAAA,EAAAA,CARP,CAAA,CASTC,gBAAgB,CATP,EAAA,CAUTC,SAAS,CAVA,EAAA,CAWTC,cAAc,CAZlB,YACa,CADoB,CAAlBN,CAAf,C,aAgBe,CAAA,EAAA,QAAA,CAAA,SAAA,EAAA,MAAA,C","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, Platform, StyleProp, ViewStyle } from 'react-native';\nimport Modal from '../Modal';\nimport DialogContent from './DialogContent';\nimport DialogActions from './DialogActions';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport DialogTitle, { DialogTitle as _DialogTitle } from './DialogTitle';\nimport DialogScrollArea from './DialogScrollArea';\nimport { withTheme } from '../../core/theming';\nimport { Theme } from '../../types';\n\ntype Props = {\n  /**\n   * Determines whether clicking outside the dialog dismiss it.\n   */\n  dismissable?: boolean;\n  /**\n   * Callback that is called when the user dismisses the dialog.\n   */\n  onDismiss?: () => void;\n  /**\n   * Determines Whether the dialog is visible.\n   */\n  visible: boolean;\n  /**\n   * Content of the `Dialog`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * Dialogs inform users about a specific task and may contain critical information, require decisions, or involve multiple tasks.\n * To render the `Dialog` above other components, you'll need to wrap it with the [`Portal`](portal.html) component.\n *\n *  <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/dialog-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/dialog-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Button, Paragraph, Dialog, Portal } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *   state = {\n *     visible: false,\n *   };\n *\n *   _showDialog = () => this.setState({ visible: true });\n *\n *   _hideDialog = () => this.setState({ visible: false });\n *\n *   render() {\n *     return (\n *       <View>\n *         <Button onPress={this._showDialog}>Show Dialog</Button>\n *         <Portal>\n *           <Dialog\n *              visible={this.state.visible}\n *              onDismiss={this._hideDialog}>\n *             <Dialog.Title>Alert</Dialog.Title>\n *             <Dialog.Content>\n *               <Paragraph>This is simple dialog</Paragraph>\n *             </Dialog.Content>\n *             <Dialog.Actions>\n *               <Button onPress={this._hideDialog}>Done</Button>\n *             </Dialog.Actions>\n *           </Dialog>\n *         </Portal>\n *       </View>\n *     );\n *   }\n * }\n * ```\n */\nclass Dialog extends React.Component<Props> {\n  // @component ./DialogContent.tsx\n  static Content = DialogContent;\n  // @component ./DialogActions.tsx\n  static Actions = DialogActions;\n  // @component ./DialogTitle.tsx\n  static Title = DialogTitle;\n  // @component ./DialogScrollArea.tsx\n  static ScrollArea = DialogScrollArea;\n\n  static defaultProps = {\n    dismissable: true,\n    visible: false,\n  };\n\n  render() {\n    const {\n      children,\n      dismissable,\n      onDismiss,\n      visible,\n      style,\n      theme,\n    } = this.props;\n\n    return (\n      <Modal\n        dismissable={dismissable}\n        onDismiss={onDismiss}\n        visible={visible}\n        contentContainerStyle={[\n          {\n            borderRadius: theme.roundness,\n            backgroundColor: theme.colors.surface,\n          },\n          styles.container,\n          style,\n        ]}\n      >\n        {React.Children.toArray(children)\n          .filter(child => child != null && typeof child !== 'boolean')\n          .map((child, i) => {\n            if (\n              i === 0 &&\n              React.isValidElement(child) &&\n              child.type === DialogContent\n            ) {\n              // Dialog content is the first item, so we add a top padding\n              return React.cloneElement(child, {\n                style: [{ paddingTop: 24 }, child.props.style],\n              });\n            }\n\n            return child;\n          })}\n      </Modal>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    /**\n     * This prevents the shadow from being clipped on Android since Android\n     * doesn't support `overflow: visible`.\n     * One downside for this fix is that it will disable clicks on the area\n     * of the shadow around the dialog, consequently, if you click around the\n     * dialog (44 pixel from the top and bottom) it won't be dismissed.\n     */\n    marginVertical: Platform.OS === 'android' ? 44 : 0,\n    marginHorizontal: 26,\n    elevation: 24,\n    justifyContent: 'flex-start',\n  },\n});\n\nexport default withTheme(Dialog);\n"]},"metadata":{},"sourceType":"script"}