{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.MenuItem=exports.default=void 0;var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _possibleConstructorReturn2=_interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));var _getPrototypeOf2=_interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));var _inherits2=_interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));var _defineProperty2=_interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));var _color=_interopRequireDefault(require(\"color\"));var React=_interopRequireWildcard(require(\"react\"));var _reactNative=require(\"react-native-web/dist/index\");var _Icon=_interopRequireDefault(require(\"../Icon\"));var _TouchableRipple=_interopRequireDefault(require(\"../TouchableRipple\"));var _Text=_interopRequireDefault(require(\"../Typography/Text\"));var _theming=require(\"../../core/theming\");var _colors=require(\"../../styles/colors\");var _jsxFileName=\"/Users/trensik/dev/react-native-paper/src/components/Menu/MenuItem.tsx\";var MenuItem=function(_React$Component){(0,_inherits2.default)(MenuItem,_React$Component);function MenuItem(){(0,_classCallCheck2.default)(this,MenuItem);return(0,_possibleConstructorReturn2.default)(this,(0,_getPrototypeOf2.default)(MenuItem).apply(this,arguments));}(0,_createClass2.default)(MenuItem,[{key:\"render\",value:function render(){var _this$props=this.props,icon=_this$props.icon,title=_this$props.title,disabled=_this$props.disabled,onPress=_this$props.onPress,theme=_this$props.theme,style=_this$props.style,testID=_this$props.testID,titleStyle=_this$props.titleStyle;var disabledColor=(0,_color.default)(theme.dark?_colors.white:_colors.black).alpha(0.32).rgb().string();var titleColor=disabled?disabledColor:(0,_color.default)(theme.colors.text).alpha(0.87).rgb().string();var iconColor=disabled?disabledColor:(0,_color.default)(theme.colors.text).alpha(0.54).rgb().string();return React.createElement(_TouchableRipple.default,{style:[styles.container,style],onPress:onPress,disabled:disabled,testID:testID,__source:{fileName:_jsxFileName,lineNumber:86}},React.createElement(_reactNative.View,{style:styles.row,__source:{fileName:_jsxFileName,lineNumber:92}},icon?React.createElement(_reactNative.View,{style:[styles.item,styles.icon],pointerEvents:\"box-none\",__source:{fileName:_jsxFileName,lineNumber:94}},React.createElement(_Icon.default,{source:icon,size:24,color:iconColor,__source:{fileName:_jsxFileName,lineNumber:95}})):null,React.createElement(_reactNative.View,{style:[styles.item,styles.content,icon?styles.widthWithIcon:null],pointerEvents:\"none\",__source:{fileName:_jsxFileName,lineNumber:98}},React.createElement(_Text.default,{numberOfLines:1,style:[styles.title,{color:titleColor},titleStyle],__source:{fileName:_jsxFileName,lineNumber:106}},title))));}}]);return MenuItem;}(React.Component);exports.MenuItem=MenuItem;(0,_defineProperty2.default)(MenuItem,\"displayName\",'Menu.Item');var minWidth=112;var maxWidth=280;var iconWidth=40;var styles=_reactNative.StyleSheet.create({container:{paddingHorizontal:8,minWidth:minWidth,maxWidth:maxWidth,height:48,justifyContent:'center'},row:{flexDirection:'row'},icon:{width:iconWidth},title:{fontSize:16},item:{marginHorizontal:8},content:{justifyContent:'center',minWidth:minWidth-16,maxWidth:maxWidth-16},widthWithIcon:{maxWidth:maxWidth-(iconWidth+48)}});var _default=(0,_theming.withTheme)(MenuItem);exports.default=_default;","map":{"version":3,"sources":["MenuItem.tsx"],"names":["MenuItem","React","Component","icon","title","disabled","onPress","theme","style","testID","titleStyle","disabledColor","white","black","titleColor","iconColor","styles","color","minWidth","maxWidth","iconWidth","StyleSheet","container","paddingHorizontal","height","justifyContent","row","flexDirection","width","fontSize","item","marginHorizontal","content","widthWithIcon"],"mappings":"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","sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport {\n  View,\n  StyleSheet,\n  TextStyle,\n  ViewStyle,\n  StyleProp,\n} from 'react-native';\nimport Icon, { IconSource } from '../Icon';\nimport TouchableRipple from '../TouchableRipple';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport { black, white } from '../../styles/colors';\nimport { Theme } from '../../types';\n\ntype Props = {\n  /**\n   * Title text for the `MenuItem`.\n   */\n  title: React.ReactNode;\n  /**\n   * Icon to display for the `MenuItem`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the 'item' is disabled. A disabled 'item' is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  style?: StyleProp<ViewStyle>;\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n};\n\n/**\n * A component to show a single list item inside a Menu.\n *\n */\n\nclass MenuItem extends React.Component<Props> {\n  static displayName = 'Menu.Item';\n\n  render() {\n    const {\n      icon,\n      title,\n      disabled,\n      onPress,\n      theme,\n      style,\n      testID,\n      titleStyle,\n    } = this.props;\n\n    const disabledColor = color(theme.dark ? white : black)\n      .alpha(0.32)\n      .rgb()\n      .string();\n\n    const titleColor = disabled\n      ? disabledColor\n      : color(theme.colors.text)\n          .alpha(0.87)\n          .rgb()\n          .string();\n\n    const iconColor = disabled\n      ? disabledColor\n      : color(theme.colors.text)\n          .alpha(0.54)\n          .rgb()\n          .string();\n\n    return (\n      <TouchableRipple\n        style={[styles.container, style]}\n        onPress={onPress}\n        disabled={disabled}\n        testID={testID}\n      >\n        <View style={styles.row}>\n          {icon ? (\n            <View style={[styles.item, styles.icon]} pointerEvents=\"box-none\">\n              <Icon source={icon} size={24} color={iconColor} />\n            </View>\n          ) : null}\n          <View\n            style={[\n              styles.item,\n              styles.content,\n              icon ? styles.widthWithIcon : null,\n            ]}\n            pointerEvents=\"none\"\n          >\n            <Text\n              numberOfLines={1}\n              style={[styles.title, { color: titleColor }, titleStyle]}\n            >\n              {title}\n            </Text>\n          </View>\n        </View>\n      </TouchableRipple>\n    );\n  }\n}\n\nconst minWidth = 112;\nconst maxWidth = 280;\nconst iconWidth = 40;\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 8,\n    minWidth,\n    maxWidth,\n    height: 48,\n    justifyContent: 'center',\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  icon: {\n    width: iconWidth,\n  },\n  title: {\n    fontSize: 16,\n  },\n  item: {\n    marginHorizontal: 8,\n  },\n  content: {\n    justifyContent: 'center',\n    minWidth: minWidth - 16,\n    maxWidth: maxWidth - 16,\n  },\n  widthWithIcon: {\n    maxWidth: maxWidth - (iconWidth + 48),\n  },\n});\n\nexport default withTheme(MenuItem);\n\n// @component-docs ignore-next-line\nexport { MenuItem };\n"]},"metadata":{},"sourceType":"script"}