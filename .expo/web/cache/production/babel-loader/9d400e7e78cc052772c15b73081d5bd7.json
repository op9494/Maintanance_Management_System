{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.CheckboxAndroid=exports.default=void 0;var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _objectWithoutProperties2=_interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _possibleConstructorReturn2=_interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));var _getPrototypeOf3=_interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));var _assertThisInitialized2=_interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));var _inherits2=_interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));var _defineProperty2=_interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));var React=_interopRequireWildcard(require(\"react\"));var _reactNative=require(\"react-native-web/dist/index\");var _color=_interopRequireDefault(require(\"color\"));var _MaterialCommunityIcon=_interopRequireDefault(require(\"../MaterialCommunityIcon\"));var _TouchableRipple=_interopRequireDefault(require(\"../TouchableRipple\"));var _theming=require(\"../../core/theming\");var _jsxFileName=\"/Users/trensik/dev/react-native-paper/src/components/Checkbox/CheckboxAndroid.tsx\";var ANIMATION_DURATION=100;var CheckboxAndroid=function(_React$Component){(0,_inherits2.default)(CheckboxAndroid,_React$Component);function CheckboxAndroid(){var _getPrototypeOf2;var _this;(0,_classCallCheck2.default)(this,CheckboxAndroid);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=(0,_possibleConstructorReturn2.default)(this,(_getPrototypeOf2=(0,_getPrototypeOf3.default)(CheckboxAndroid)).call.apply(_getPrototypeOf2,[this].concat(args)));(0,_defineProperty2.default)((0,_assertThisInitialized2.default)(_this),\"state\",{scaleAnim:new _reactNative.Animated.Value(1)});return _this;}(0,_createClass2.default)(CheckboxAndroid,[{key:\"componentDidUpdate\",value:function componentDidUpdate(prevProps){if(prevProps.status===this.props.status){return;}var checked=this.props.status==='checked';var animation=this.props.theme.animation;_reactNative.Animated.sequence([_reactNative.Animated.timing(this.state.scaleAnim,{toValue:0.85,duration:checked?ANIMATION_DURATION*animation.scale:0,useNativeDriver:false}),_reactNative.Animated.timing(this.state.scaleAnim,{toValue:1,duration:checked?ANIMATION_DURATION*animation.scale:ANIMATION_DURATION*animation.scale*1.75,useNativeDriver:false})]).start();}},{key:\"render\",value:function render(){var _this$props=this.props,status=_this$props.status,disabled=_this$props.disabled,onPress=_this$props.onPress,theme=_this$props.theme,rest=(0,_objectWithoutProperties2.default)(_this$props,[\"status\",\"disabled\",\"onPress\",\"theme\"]);var checked=status==='checked';var indeterminate=status==='indeterminate';var checkedColor=this.props.color||theme.colors.accent;var uncheckedColor=this.props.uncheckedColor||(0,_color.default)(theme.colors.text).alpha(theme.dark?0.7:0.54).rgb().string();var rippleColor,checkboxColor;if(disabled){rippleColor=(0,_color.default)(theme.colors.text).alpha(0.16).rgb().string();checkboxColor=theme.colors.disabled;}else{rippleColor=(0,_color.default)(checkedColor).fade(0.32).rgb().string();checkboxColor=checked?checkedColor:uncheckedColor;}var borderWidth=this.state.scaleAnim.interpolate({inputRange:[0.8,1],outputRange:[7,0]});var icon=indeterminate?'minus-box':checked?'checkbox-marked':'checkbox-blank-outline';return React.createElement(_TouchableRipple.default,(0,_extends2.default)({},rest,{borderless:true,rippleColor:rippleColor,onPress:onPress,disabled:disabled,accessibilityTraits:disabled?['button','disabled']:'button',accessibilityComponentType:\"button\",accessibilityRole:\"button\",accessibilityStates:disabled?['disabled']:[],accessibilityLiveRegion:\"polite\",style:styles.container,__source:{fileName:_jsxFileName,lineNumber:129}}),React.createElement(_reactNative.Animated.View,{style:{transform:[{scale:this.state.scaleAnim}]},__source:{fileName:_jsxFileName,lineNumber:142}},React.createElement(_MaterialCommunityIcon.default,{allowFontScaling:false,name:icon,size:24,color:checkboxColor,direction:\"ltr\",__source:{fileName:_jsxFileName,lineNumber:143}}),React.createElement(_reactNative.View,{style:[_reactNative.StyleSheet.absoluteFill,styles.fillContainer],__source:{fileName:_jsxFileName,lineNumber:150}},React.createElement(_reactNative.Animated.View,{style:[styles.fill,{borderColor:checkboxColor},{borderWidth:borderWidth}],__source:{fileName:_jsxFileName,lineNumber:151}}))));}}]);return CheckboxAndroid;}(React.Component);exports.CheckboxAndroid=CheckboxAndroid;(0,_defineProperty2.default)(CheckboxAndroid,\"displayName\",'Checkbox.Android');var styles=_reactNative.StyleSheet.create({container:{borderRadius:18,width:36,height:36,padding:6},fillContainer:{alignItems:'center',justifyContent:'center'},fill:{height:14,width:14}});var _default=(0,_theming.withTheme)(CheckboxAndroid);exports.default=_default;","map":{"version":3,"sources":["CheckboxAndroid.tsx"],"names":["ANIMATION_DURATION","CheckboxAndroid","React","Component","scaleAnim","Animated","prevProps","checked","animation","toValue","duration","useNativeDriver","status","disabled","onPress","theme","rest","indeterminate","checkedColor","uncheckedColor","rippleColor","checkboxColor","borderWidth","inputRange","outputRange","icon","styles","transform","scale","StyleSheet","borderColor","container","borderRadius","width","height","padding","fillContainer","alignItems","justifyContent","fill"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport { Theme, $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\ntype State = {\n  scaleAnim: Animated.Value;\n};\n\n// From https://material.io/design/motion/speed.html#duration\nconst ANIMATION_DURATION = 100;\n\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for Android.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nclass CheckboxAndroid extends React.Component<Props, State> {\n  static displayName = 'Checkbox.Android';\n\n  state = {\n    scaleAnim: new Animated.Value(1),\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.status === this.props.status) {\n      return;\n    }\n\n    const checked = this.props.status === 'checked';\n    const { animation } = this.props.theme;\n\n    Animated.sequence([\n      Animated.timing(this.state.scaleAnim, {\n        toValue: 0.85,\n        duration: checked ? ANIMATION_DURATION * animation.scale : 0,\n        useNativeDriver: false,\n      }),\n      Animated.timing(this.state.scaleAnim, {\n        toValue: 1,\n        duration: checked\n          ? ANIMATION_DURATION * animation.scale\n          : ANIMATION_DURATION * animation.scale * 1.75,\n        useNativeDriver: false,\n      }),\n    ]).start();\n  }\n\n  render() {\n    const { status, disabled, onPress, theme, ...rest } = this.props;\n    const checked = status === 'checked';\n    const indeterminate = status === 'indeterminate';\n    const checkedColor = this.props.color || theme.colors.accent;\n    const uncheckedColor =\n      this.props.uncheckedColor ||\n      color(theme.colors.text)\n        .alpha(theme.dark ? 0.7 : 0.54)\n        .rgb()\n        .string();\n\n    let rippleColor, checkboxColor;\n\n    if (disabled) {\n      rippleColor = color(theme.colors.text)\n        .alpha(0.16)\n        .rgb()\n        .string();\n      checkboxColor = theme.colors.disabled;\n    } else {\n      rippleColor = color(checkedColor)\n        .fade(0.32)\n        .rgb()\n        .string();\n      checkboxColor = checked ? checkedColor : uncheckedColor;\n    }\n\n    const borderWidth = this.state.scaleAnim.interpolate({\n      inputRange: [0.8, 1],\n      outputRange: [7, 0],\n    });\n\n    const icon = indeterminate\n      ? 'minus-box'\n      : checked\n      ? 'checkbox-marked'\n      : 'checkbox-blank-outline';\n\n    return (\n      <TouchableRipple\n        {...rest}\n        borderless\n        rippleColor={rippleColor}\n        onPress={onPress}\n        disabled={disabled}\n        accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityStates={disabled ? ['disabled'] : []}\n        accessibilityLiveRegion=\"polite\"\n        style={styles.container}\n      >\n        <Animated.View style={{ transform: [{ scale: this.state.scaleAnim }] }}>\n          <MaterialCommunityIcon\n            allowFontScaling={false}\n            name={icon}\n            size={24}\n            color={checkboxColor}\n            direction=\"ltr\"\n          />\n          <View style={[StyleSheet.absoluteFill, styles.fillContainer]}>\n            <Animated.View\n              style={[\n                styles.fill,\n                { borderColor: checkboxColor },\n                { borderWidth },\n              ]}\n            />\n          </View>\n        </Animated.View>\n      </TouchableRipple>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    width: 36,\n    height: 36,\n    padding: 6,\n  },\n  fillContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  fill: {\n    height: 14,\n    width: 14,\n  },\n});\n\nexport default withTheme(CheckboxAndroid);\n\n// @component-docs ignore-next-line\nexport { CheckboxAndroid };\n"]},"metadata":{},"sourceType":"script"}