{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _objectWithoutProperties2=_interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _possibleConstructorReturn2=_interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));var _getPrototypeOf2=_interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));var _inherits2=_interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));var React=_interopRequireWildcard(require(\"react\"));var _colors=require(\"../styles/colors\");var _reactNative=require(\"react-native-web/dist/index\");var _color=_interopRequireDefault(require(\"color\"));var _theming=require(\"../core/theming\");var _jsxFileName=\"/Users/trensik/dev/react-native-paper/src/components/Switch.tsx\";var version=_reactNative.NativeModules.PlatformConstants?_reactNative.NativeModules.PlatformConstants.reactNativeVersion:undefined;var Switch=function(_React$Component){(0,_inherits2.default)(Switch,_React$Component);function Switch(){(0,_classCallCheck2.default)(this,Switch);return(0,_possibleConstructorReturn2.default)(this,(0,_getPrototypeOf2.default)(Switch).apply(this,arguments));}(0,_createClass2.default)(Switch,[{key:\"render\",value:function render(){var _this$props=this.props,value=_this$props.value,disabled=_this$props.disabled,onValueChange=_this$props.onValueChange,color=_this$props.color,theme=_this$props.theme,rest=(0,_objectWithoutProperties2.default)(_this$props,[\"value\",\"disabled\",\"onValueChange\",\"color\",\"theme\"]);var checkedColor=color||theme.colors.accent;var onTintColor=_reactNative.Platform.OS==='ios'?checkedColor:disabled?theme.dark?(0,_color.default)(_colors.white).alpha(0.1).rgb().string():(0,_color.default)(_colors.black).alpha(0.12).rgb().string():(0,_color.default)(checkedColor).alpha(0.5).rgb().string();var thumbTintColor=_reactNative.Platform.OS==='ios'?undefined:disabled?theme.dark?_colors.grey800:_colors.grey400:value?checkedColor:theme.dark?_colors.grey400:_colors.grey50;var props=version&&version.major===0&&version.minor<=56?{onTintColor:onTintColor,thumbTintColor:thumbTintColor}:{thumbColor:thumbTintColor,trackColor:{true:onTintColor,false:''}};return React.createElement(_reactNative.Switch,(0,_extends2.default)({value:value,disabled:disabled,onValueChange:disabled?undefined:onValueChange},props,rest,{__source:{fileName:_jsxFileName,lineNumber:147}}));}}]);return Switch;}(React.Component);var _default=(0,_theming.withTheme)(Switch);exports.default=_default;","map":{"version":3,"sources":["Switch.tsx"],"names":["version","NativeModules","Switch","React","Component","value","disabled","onValueChange","color","theme","rest","checkedColor","onTintColor","Platform","white","black","thumbTintColor","grey800","grey400","grey50","props","thumbColor","trackColor","true","false"],"mappings":"k5BAAA,GAAA,CAAA,KAAA,CAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA,CACA,GAAA,CAAA,OAAA,CAAA,OAAA,oBAAA,C,wDAQA,GAAA,CAAA,MAAA,CAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA,CACA,GAAA,CAAA,QAAA,CAAA,OAAA,mBAAA,C,mFAGA,GAAMA,CAAAA,OAAO,CAAGC,YAAAA,CAAAA,aAAAA,CAAAA,iBAAAA,CACZA,YAAAA,CAAAA,aAAAA,CAAAA,iBAAAA,CADYA,kBAAAA,CAAhB,SAAA,CA0EMC,GAAAA,CAAAA,M,+TACK,CAAA,GAAA,CAAA,WAAA,CAQH,KARG,KAAA,CAELG,KAFK,CAAA,WAAA,CAAA,KAAA,CAGLC,QAHK,CAAA,WAAA,CAAA,QAAA,CAILC,aAJK,CAAA,WAAA,CAAA,aAAA,CAKLC,KALK,CAAA,WAAA,CAAA,KAAA,CAMLC,KANK,CAAA,WAAA,CAAA,KAAA,CAOFC,IAPE,CAAA,CAAA,EAAA,yBAAA,CAAA,OAAA,EAAA,WAAA,CAAA,CAAA,OAAA,CAAA,UAAA,CAAA,eAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA,CAUP,GAAMC,CAAAA,YAAY,CAAGH,KAAK,EAAIC,KAAK,CAALA,MAAAA,CAA9B,MAAA,CAEA,GAAMG,CAAAA,WAAW,CACfC,YAAAA,CAAAA,QAAAA,CAAAA,EAAAA,GAAAA,KAAAA,CAAAA,YAAAA,CAEIP,QAAQ,CACRG,KAAK,CAALA,IAAAA,CACE,CAAA,EAAA,MAAA,CAAA,OAAA,EAASK,OAAAA,CAAT,KAAA,EAAA,KAAA,CAAA,GAAA,EAAA,GAAA,GADFL,MACE,EADFA,CAKE,CAAA,EAAA,MAAA,CAAA,OAAA,EAASM,OAAAA,CAAT,KAAA,EAAA,KAAA,CAAA,IAAA,EAAA,GAAA,GANM,MAMN,EANM,CAUR,CAAA,EAAA,MAAA,CAAA,OAAA,EAAA,YAAA,EAAA,KAAA,CAAA,GAAA,EAAA,GAAA,GAbN,MAaM,EAbN,CAkBA,GAAMC,CAAAA,cAAc,CAClBH,YAAAA,CAAAA,QAAAA,CAAAA,EAAAA,GAAAA,KAAAA,CAAAA,SAAAA,CAEIP,QAAQ,CACRG,KAAK,CAALA,IAAAA,CACEQ,OAAAA,CADFR,OAAAA,CAEES,OAAAA,CAHM,OAAA,CAIRb,KAAK,CAAA,YAAA,CAELI,KAAK,CAALA,IAAAA,CACAS,OAAAA,CADAT,OAAAA,CAEAU,OAAAA,CAXN,MAAA,CAaA,GAAMC,CAAAA,KAAK,CACTpB,OAAO,EAAIA,OAAO,CAAPA,KAAAA,GAAXA,CAAAA,EAAkCA,OAAO,CAAPA,KAAAA,EAAlCA,EAAAA,CACI,CACEY,WAAW,CADb,WAAA,CAEEI,cAAc,CAHpBhB,cACI,CADJA,CAKI,CACEqB,UAAU,CADZ,cAAA,CAEEC,UAAU,CAAE,CACVC,IAAI,CADM,WAAA,CAEVC,KAAK,CAVf,EAQoB,CAFd,CANN,CAcA,MACE,CAAA,KAAA,CAAA,aAAA,CAAC,YAAA,CAAD,MAAA,CAAA,CAAA,EAAA,SAAA,CAAA,OAAA,EAAA,CACE,KAAK,CADP,KAAA,CAEE,QAAQ,CAFV,QAAA,CAGE,aAAa,CAAElB,QAAQ,CAAA,SAAA,CAHzB,aAAA,CAAA,CAAA,KAAA,CAAA,IAAA,CAAA,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CADF,GACE,CAAA,CAAA,CAAA,CADF,C,qBA1DiBH,KAAK,CAACC,S,CAArBF,C,aAsES,CAAA,EAAA,QAAA,CAAA,SAAA,EAAA,MAAA,C","sourcesContent":["import * as React from 'react';\nimport { grey400, grey800, grey50, white, black } from '../styles/colors';\nimport {\n  NativeModules,\n  Platform,\n  StyleProp,\n  Switch as NativeSwitch,\n  ViewStyle,\n} from 'react-native';\nimport setColor from 'color';\nimport { withTheme } from '../core/theming';\nimport { Theme } from '../types';\n\nconst version = NativeModules.PlatformConstants\n  ? NativeModules.PlatformConstants.reactNativeVersion\n  : undefined;\n\ntype Props = React.ComponentPropsWithRef<typeof NativeSwitch> & {\n  /**\n   * Disable toggling the switch.\n   */\n  disabled?: boolean;\n  /**\n   * Value of the switch, true means 'on', false means 'off'.\n   */\n  value?: boolean;\n  /**\n   * Custom color for switch.\n   */\n  color?: string;\n  /**\n   * Callback called with the new value when it changes.\n   */\n  onValueChange?: Function;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * Switch is a visual toggle between two mutually exclusive states â€” on and off.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/switch-enabled.android.png\" />\n *     <figcaption>Android (enabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-disabled.android.png\" />\n *     <figcaption>Android (disabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-enabled.ios.png\" />\n *     <figcaption>iOS (enabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-disabled.ios.png\" />\n *     <figcaption>iOS (disabled)</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Switch } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *   state = {\n *     isSwitchOn: false,\n *   };\n *\n *   _onToggleSwitch = () => this.setState(state => ({ isSwitchOn: !state.isSwitchOn }));\n *\n *   render() {\n *     const { isSwitchOn } = this.state;\n *     return (\n *       <Switch\n *         value={isSwitchOn}\n *         onValueChange={this._onToggleSwitch}\n *       />\n *     );\n *   }\n * }\n * ```\n */\nclass Switch extends React.Component<Props> {\n  render() {\n    const {\n      value,\n      disabled,\n      onValueChange,\n      color,\n      theme,\n      ...rest\n    } = this.props;\n\n    const checkedColor = color || theme.colors.accent;\n\n    const onTintColor =\n      Platform.OS === 'ios'\n        ? checkedColor\n        : disabled\n        ? theme.dark\n          ? setColor(white)\n              .alpha(0.1)\n              .rgb()\n              .string()\n          : setColor(black)\n              .alpha(0.12)\n              .rgb()\n              .string()\n        : setColor(checkedColor)\n            .alpha(0.5)\n            .rgb()\n            .string();\n\n    const thumbTintColor =\n      Platform.OS === 'ios'\n        ? undefined\n        : disabled\n        ? theme.dark\n          ? grey800\n          : grey400\n        : value\n        ? checkedColor\n        : theme.dark\n        ? grey400\n        : grey50;\n\n    const props =\n      version && version.major === 0 && version.minor <= 56\n        ? {\n            onTintColor,\n            thumbTintColor,\n          }\n        : {\n            thumbColor: thumbTintColor,\n            trackColor: {\n              true: onTintColor,\n              false: '',\n            },\n          };\n\n    return (\n      <NativeSwitch\n        value={value}\n        disabled={disabled}\n        onValueChange={disabled ? undefined : onValueChange}\n        {...props}\n        {...rest}\n      />\n    );\n  }\n}\n\nexport default withTheme(Switch);\n"]},"metadata":{},"sourceType":"script"}