{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _objectWithoutProperties2=_interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _possibleConstructorReturn2=_interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));var _getPrototypeOf2=_interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));var _inherits2=_interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));var _defineProperty2=_interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));var _color=_interopRequireDefault(require(\"color\"));var React=_interopRequireWildcard(require(\"react\"));var _reactNative=require(\"react-native-web/dist/index\");var _TouchableRipple=_interopRequireDefault(require(\"../TouchableRipple\"));var _Text=_interopRequireDefault(require(\"../Typography/Text\"));var _theming=require(\"../../core/theming\");var _jsxFileName=\"/Users/trensik/dev/react-native-paper/src/components/List/ListItem.tsx\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){(0,_defineProperty2.default)(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}var ListItem=function(_React$Component){(0,_inherits2.default)(ListItem,_React$Component);function ListItem(){(0,_classCallCheck2.default)(this,ListItem);return(0,_possibleConstructorReturn2.default)(this,(0,_getPrototypeOf2.default)(ListItem).apply(this,arguments));}(0,_createClass2.default)(ListItem,[{key:\"renderDescription\",value:function renderDescription(descriptionColor,description){var _this$props=this.props,descriptionEllipsizeMode=_this$props.descriptionEllipsizeMode,descriptionStyle=_this$props.descriptionStyle,descriptionNumberOfLines=_this$props.descriptionNumberOfLines;return typeof description==='function'?description({ellipsizeMode:descriptionEllipsizeMode,color:descriptionColor,fontSize:styles.description.fontSize}):React.createElement(_Text.default,{numberOfLines:descriptionNumberOfLines,ellipsizeMode:descriptionEllipsizeMode,style:[styles.description,{color:descriptionColor},descriptionStyle],__source:{fileName:_jsxFileName,lineNumber:144}},description);}},{key:\"render\",value:function render(){var _this$props2=this.props,left=_this$props2.left,right=_this$props2.right,title=_this$props2.title,description=_this$props2.description,onPress=_this$props2.onPress,theme=_this$props2.theme,style=_this$props2.style,titleStyle=_this$props2.titleStyle,titleNumberOfLines=_this$props2.titleNumberOfLines,titleEllipsizeMode=_this$props2.titleEllipsizeMode,rest=(0,_objectWithoutProperties2.default)(_this$props2,[\"left\",\"right\",\"title\",\"description\",\"onPress\",\"theme\",\"style\",\"titleStyle\",\"titleNumberOfLines\",\"titleEllipsizeMode\"]);var titleColor=(0,_color.default)(theme.colors.text).alpha(0.87).rgb().string();var descriptionColor=(0,_color.default)(theme.colors.text).alpha(0.54).rgb().string();return React.createElement(_TouchableRipple.default,(0,_extends2.default)({},rest,{style:[styles.container,style],onPress:onPress,__source:{fileName:_jsxFileName,lineNumber:182}}),React.createElement(_reactNative.View,{style:styles.row,__source:{fileName:_jsxFileName,lineNumber:187}},left?left({color:descriptionColor,style:description?styles.iconMarginLeft:_objectSpread({},styles.iconMarginLeft,{},styles.marginVerticalNone)}):null,React.createElement(_reactNative.View,{style:[styles.item,styles.content],__source:{fileName:_jsxFileName,lineNumber:199}},React.createElement(_Text.default,{ellipsizeMode:titleEllipsizeMode,numberOfLines:titleNumberOfLines,style:[styles.title,{color:titleColor},titleStyle],__source:{fileName:_jsxFileName,lineNumber:200}},title),description?this.renderDescription(descriptionColor,description):null),right?right({color:descriptionColor,style:description?styles.iconMarginRight:_objectSpread({},styles.iconMarginRight,{},styles.marginVerticalNone)}):null));}}]);return ListItem;}(React.Component);(0,_defineProperty2.default)(ListItem,\"displayName\",'List.Item');(0,_defineProperty2.default)(ListItem,\"defaultProps\",{titleNumberOfLines:1,descriptionNumberOfLines:2});var styles=_reactNative.StyleSheet.create({container:{padding:8},row:{flexDirection:'row'},title:{fontSize:16},description:{fontSize:14},marginVerticalNone:{marginVertical:0},iconMarginLeft:{marginLeft:0,marginRight:16},iconMarginRight:{marginRight:0},item:{marginVertical:6,paddingLeft:8},content:{flex:1,justifyContent:'center'}});var _default=(0,_theming.withTheme)(ListItem);exports.default=_default;","map":{"version":3,"sources":["ListItem.tsx"],"names":["ListItem","React","Component","titleNumberOfLines","descriptionNumberOfLines","descriptionColor","description","descriptionEllipsizeMode","descriptionStyle","ellipsizeMode","color","fontSize","styles","left","right","title","onPress","theme","style","titleStyle","titleEllipsizeMode","rest","titleColor","StyleSheet","container","padding","row","flexDirection","marginVerticalNone","marginVertical","iconMarginLeft","marginLeft","marginRight","iconMarginRight","item","paddingLeft","content","flex","justifyContent"],"mappings":"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","sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport TouchableRipple from '../TouchableRipple';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport { Theme, $RemoveChildren, EllipsizeProp } from '../../types';\n\ntype Description =\n  | React.ReactNode\n  | ((props: {\n      ellipsizeMode: EllipsizeProp | undefined;\n      color: string;\n      fontSize: number;\n    }) => React.ReactNode);\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Title text for the list item.\n   */\n  title: React.ReactNode;\n  /**\n   * Description text for the list item or callback which returns a React element to display the description.\n   */\n  description?: Description | null;\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: {\n    color: string;\n    style: {\n      marginLeft: number;\n      marginRight: number;\n      marginVertical?: number;\n    };\n  }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the right side.\n   */\n  right?: (props: {\n    color: string;\n    style?: {\n      marginRight: number;\n      marginVertical?: number;\n    };\n  }) => React.ReactNode;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * Style that is passed to the wrapping TouchableRipple element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Style that is passed to Description element.\n   */\n  descriptionStyle?: StyleProp<TextStyle>;\n  /**\n   * Truncate Title text such that the total number of lines does not\n   * exceed this number.\n   */\n  titleNumberOfLines?: number;\n  /**\n   * Truncate Description text such that the total number of lines does not\n   * exceed this number.\n   */\n  descriptionNumberOfLines?: number;\n  /**\n   * Ellipsize Mode for the Title\n   */\n  titleEllipsizeMode?: EllipsizeProp;\n  /**\n   * Ellipsize Mode for the Description\n   */\n  descriptionEllipsizeMode?: EllipsizeProp;\n};\n\n/**\n * A component to show tiles inside a List.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-item-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-item-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-item-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <List.Item\n *     title=\"First Item\"\n *     description=\"Item description\"\n *     left={props => <List.Icon {...props} icon=\"folder\" />}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass ListItem extends React.Component<Props> {\n  static displayName = 'List.Item';\n\n  static defaultProps: Partial<Props> = {\n    titleNumberOfLines: 1,\n    descriptionNumberOfLines: 2,\n  };\n\n  renderDescription(\n    descriptionColor: string,\n    description?: Description | null\n  ) {\n    const {\n      descriptionEllipsizeMode,\n      descriptionStyle,\n      descriptionNumberOfLines,\n    } = this.props;\n\n    return typeof description === 'function' ? (\n      description({\n        ellipsizeMode: descriptionEllipsizeMode,\n        color: descriptionColor,\n        fontSize: styles.description.fontSize,\n      })\n    ) : (\n      <Text\n        numberOfLines={descriptionNumberOfLines}\n        ellipsizeMode={descriptionEllipsizeMode}\n        style={[\n          styles.description,\n          { color: descriptionColor },\n          descriptionStyle,\n        ]}\n      >\n        {description}\n      </Text>\n    );\n  }\n\n  render() {\n    const {\n      left,\n      right,\n      title,\n      description,\n      onPress,\n      theme,\n      style,\n      titleStyle,\n      titleNumberOfLines,\n      titleEllipsizeMode,\n      ...rest\n    } = this.props;\n    const titleColor = color(theme.colors.text)\n      .alpha(0.87)\n      .rgb()\n      .string();\n    const descriptionColor = color(theme.colors.text)\n      .alpha(0.54)\n      .rgb()\n      .string();\n\n    return (\n      <TouchableRipple\n        {...rest}\n        style={[styles.container, style]}\n        onPress={onPress}\n      >\n        <View style={styles.row}>\n          {left\n            ? left({\n                color: descriptionColor,\n                style: description\n                  ? styles.iconMarginLeft\n                  : {\n                      ...styles.iconMarginLeft,\n                      ...styles.marginVerticalNone,\n                    },\n              })\n            : null}\n          <View style={[styles.item, styles.content]}>\n            <Text\n              ellipsizeMode={titleEllipsizeMode}\n              numberOfLines={titleNumberOfLines}\n              style={[styles.title, { color: titleColor }, titleStyle]}\n            >\n              {title}\n            </Text>\n            {description\n              ? this.renderDescription(descriptionColor, description)\n              : null}\n          </View>\n          {right\n            ? right({\n                color: descriptionColor,\n                style: description\n                  ? styles.iconMarginRight\n                  : {\n                      ...styles.iconMarginRight,\n                      ...styles.marginVerticalNone,\n                    },\n              })\n            : null}\n        </View>\n      </TouchableRipple>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  title: {\n    fontSize: 16,\n  },\n  description: {\n    fontSize: 14,\n  },\n  marginVerticalNone: { marginVertical: 0 },\n  iconMarginLeft: { marginLeft: 0, marginRight: 16 },\n  iconMarginRight: { marginRight: 0 },\n  item: {\n    marginVertical: 6,\n    paddingLeft: 8,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n});\n\nexport default withTheme(ListItem);\n"]},"metadata":{},"sourceType":"script"}