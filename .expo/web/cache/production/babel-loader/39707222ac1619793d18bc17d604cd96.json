{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.RadioButtonAndroid=exports.default=void 0;var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _objectWithoutProperties2=_interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _possibleConstructorReturn2=_interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));var _getPrototypeOf3=_interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));var _assertThisInitialized2=_interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));var _inherits2=_interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));var _defineProperty2=_interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));var React=_interopRequireWildcard(require(\"react\"));var _reactNative=require(\"react-native-web/dist/index\");var _color=_interopRequireDefault(require(\"color\"));var _RadioButtonGroup=require(\"./RadioButtonGroup\");var _utils=require(\"./utils\");var _TouchableRipple=_interopRequireDefault(require(\"../TouchableRipple\"));var _theming=require(\"../../core/theming\");var _jsxFileName=\"/Users/trensik/dev/react-native-paper/src/components/RadioButton/RadioButtonAndroid.tsx\";var BORDER_WIDTH=2;var RadioButtonAndroid=function(_React$Component){(0,_inherits2.default)(RadioButtonAndroid,_React$Component);function RadioButtonAndroid(){var _getPrototypeOf2;var _this;(0,_classCallCheck2.default)(this,RadioButtonAndroid);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=(0,_possibleConstructorReturn2.default)(this,(_getPrototypeOf2=(0,_getPrototypeOf3.default)(RadioButtonAndroid)).call.apply(_getPrototypeOf2,[this].concat(args)));(0,_defineProperty2.default)((0,_assertThisInitialized2.default)(_this),\"state\",{borderAnim:new _reactNative.Animated.Value(BORDER_WIDTH),radioAnim:new _reactNative.Animated.Value(1)});return _this;}(0,_createClass2.default)(RadioButtonAndroid,[{key:\"componentDidUpdate\",value:function componentDidUpdate(prevProps){if(prevProps.status===this.props.status){return;}var scale=this.props.theme.animation.scale;if(this.props.status==='checked'){this.state.radioAnim.setValue(1.2);_reactNative.Animated.timing(this.state.radioAnim,{toValue:1,duration:150*scale,useNativeDriver:false}).start();}else{this.state.borderAnim.setValue(10);_reactNative.Animated.timing(this.state.borderAnim,{toValue:BORDER_WIDTH,duration:150*scale,useNativeDriver:false}).start();}}},{key:\"render\",value:function render(){var _this2=this;var _this$props=this.props,disabled=_this$props.disabled,onPress=_this$props.onPress,theme=_this$props.theme,value=_this$props.value,status=_this$props.status,rest=(0,_objectWithoutProperties2.default)(_this$props,[\"disabled\",\"onPress\",\"theme\",\"value\",\"status\"]);var checkedColor=this.props.color||theme.colors.accent;var uncheckedColor=this.props.uncheckedColor||(0,_color.default)(theme.colors.text).alpha(theme.dark?0.7:0.54).rgb().string();var rippleColor,radioColor;return React.createElement(_RadioButtonGroup.RadioButtonContext.Consumer,{__source:{fileName:_jsxFileName,lineNumber:108}},function(context){var checked=(0,_utils.isChecked)({contextValue:context===null||context===void 0?void 0:context.value,status:status,value:value})==='checked';if(disabled){rippleColor=(0,_color.default)(theme.colors.text).alpha(0.16).rgb().string();radioColor=theme.colors.disabled;}else{rippleColor=(0,_color.default)(checkedColor).fade(0.32).rgb().string();radioColor=checked?checkedColor:uncheckedColor;}return React.createElement(_TouchableRipple.default,(0,_extends2.default)({},rest,{borderless:true,rippleColor:rippleColor,onPress:disabled?undefined:function(){(0,_utils.handlePress)({onPress:onPress,onValueChange:context===null||context===void 0?void 0:context.onValueChange,value:value});},accessibilityTraits:disabled?['button','disabled']:'button',accessibilityComponentType:checked?'radiobutton_checked':'radiobutton_unchecked',accessibilityRole:\"button\",accessibilityStates:disabled?['disabled']:[],accessibilityLiveRegion:\"polite\",style:styles.container,__source:{fileName:_jsxFileName,lineNumber:132}}),React.createElement(_reactNative.Animated.View,{style:[styles.radio,{borderColor:radioColor,borderWidth:_this2.state.borderAnim}],__source:{fileName:_jsxFileName,lineNumber:156}},checked?React.createElement(_reactNative.View,{style:[_reactNative.StyleSheet.absoluteFill,styles.radioContainer],__source:{fileName:_jsxFileName,lineNumber:166}},React.createElement(_reactNative.Animated.View,{style:[styles.dot,{backgroundColor:radioColor,transform:[{scale:_this2.state.radioAnim}]}],__source:{fileName:_jsxFileName,lineNumber:169}})):null));});}}]);return RadioButtonAndroid;}(React.Component);exports.RadioButtonAndroid=RadioButtonAndroid;(0,_defineProperty2.default)(RadioButtonAndroid,\"displayName\",'RadioButton.Android');var styles=_reactNative.StyleSheet.create({container:{borderRadius:18},radioContainer:{alignItems:'center',justifyContent:'center'},radio:{height:20,width:20,borderRadius:10,margin:8},dot:{height:10,width:10,borderRadius:5}});var _default=(0,_theming.withTheme)(RadioButtonAndroid);exports.default=_default;","map":{"version":3,"sources":["RadioButtonAndroid.tsx"],"names":["BORDER_WIDTH","RadioButtonAndroid","React","Component","borderAnim","Animated","radioAnim","prevProps","scale","toValue","duration","useNativeDriver","disabled","onPress","theme","value","status","rest","checkedColor","uncheckedColor","checked","contextValue","context","rippleColor","radioColor","onValueChange","styles","borderColor","borderWidth","StyleSheet","backgroundColor","transform","container","borderRadius","radioContainer","alignItems","justifyContent","radio","height","width","margin","dot"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\nimport TouchableRipple from '../TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport { Theme, $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Value of the radio button\n   */\n  value: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (param?: any) => void;\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\ntype State = {\n  borderAnim: Animated.Value;\n  radioAnim: Animated.Value;\n};\n\nconst BORDER_WIDTH = 2;\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for Android.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nclass RadioButtonAndroid extends React.Component<Props, State> {\n  static displayName = 'RadioButton.Android';\n\n  state = {\n    borderAnim: new Animated.Value(BORDER_WIDTH),\n    radioAnim: new Animated.Value(1),\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.status === this.props.status) {\n      return;\n    }\n    const { scale } = this.props.theme.animation;\n    if (this.props.status === 'checked') {\n      this.state.radioAnim.setValue(1.2);\n\n      Animated.timing(this.state.radioAnim, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: false,\n      }).start();\n    } else {\n      this.state.borderAnim.setValue(10);\n\n      Animated.timing(this.state.borderAnim, {\n        toValue: BORDER_WIDTH,\n        duration: 150 * scale,\n        useNativeDriver: false,\n      }).start();\n    }\n  }\n\n  render() {\n    const { disabled, onPress, theme, value, status, ...rest } = this.props;\n    const checkedColor = this.props.color || theme.colors.accent;\n    const uncheckedColor =\n      this.props.uncheckedColor ||\n      color(theme.colors.text)\n        .alpha(theme.dark ? 0.7 : 0.54)\n        .rgb()\n        .string();\n\n    let rippleColor: string, radioColor: string;\n\n    return (\n      <RadioButtonContext.Consumer>\n        {(context?: RadioButtonContextType) => {\n          const checked =\n            isChecked({\n              contextValue: context?.value,\n              status,\n              value,\n            }) === 'checked';\n\n          if (disabled) {\n            rippleColor = color(theme.colors.text)\n              .alpha(0.16)\n              .rgb()\n              .string();\n            radioColor = theme.colors.disabled;\n          } else {\n            rippleColor = color(checkedColor)\n              .fade(0.32)\n              .rgb()\n              .string();\n            radioColor = checked ? checkedColor : uncheckedColor;\n          }\n\n          return (\n            <TouchableRipple\n              {...rest}\n              borderless\n              rippleColor={rippleColor}\n              onPress={\n                disabled\n                  ? undefined\n                  : () => {\n                      handlePress({\n                        onPress,\n                        onValueChange: context?.onValueChange,\n                        value,\n                      });\n                    }\n              }\n              accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n              accessibilityComponentType={\n                checked ? 'radiobutton_checked' : 'radiobutton_unchecked'\n              }\n              accessibilityRole=\"button\"\n              accessibilityStates={disabled ? ['disabled'] : []}\n              accessibilityLiveRegion=\"polite\"\n              style={styles.container}\n            >\n              <Animated.View\n                style={[\n                  styles.radio,\n                  {\n                    borderColor: radioColor,\n                    borderWidth: this.state.borderAnim,\n                  },\n                ]}\n              >\n                {checked ? (\n                  <View\n                    style={[StyleSheet.absoluteFill, styles.radioContainer]}\n                  >\n                    <Animated.View\n                      style={[\n                        styles.dot,\n                        {\n                          backgroundColor: radioColor,\n                          transform: [{ scale: this.state.radioAnim }],\n                        },\n                      ]}\n                    />\n                  </View>\n                ) : null}\n              </Animated.View>\n            </TouchableRipple>\n          );\n        }}\n      </RadioButtonContext.Consumer>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n  },\n  radioContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  radio: {\n    height: 20,\n    width: 20,\n    borderRadius: 10,\n    margin: 8,\n  },\n  dot: {\n    height: 10,\n    width: 10,\n    borderRadius: 5,\n  },\n});\n\nexport default withTheme(RadioButtonAndroid);\n\n// @component-docs ignore-next-line\nexport { RadioButtonAndroid };\n"]},"metadata":{},"sourceType":"script"}