{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _objectWithoutProperties2=_interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _possibleConstructorReturn2=_interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));var _getPrototypeOf3=_interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));var _assertThisInitialized2=_interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));var _inherits2=_interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));var _defineProperty2=_interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));var React=_interopRequireWildcard(require(\"react\"));var _reactNative=require(\"react-native-web/dist/index\");var _color=_interopRequireDefault(require(\"color\"));var _colors=require(\"../styles/colors\");var _theming=require(\"../core/theming\");var _jsxFileName=\"/Users/trensik/dev/react-native-paper/src/components/Badge.tsx\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){(0,_defineProperty2.default)(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}var defaultSize=20;var Badge=function(_React$Component){(0,_inherits2.default)(Badge,_React$Component);function Badge(){var _getPrototypeOf2;var _this;(0,_classCallCheck2.default)(this,Badge);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=(0,_possibleConstructorReturn2.default)(this,(_getPrototypeOf2=(0,_getPrototypeOf3.default)(Badge)).call.apply(_getPrototypeOf2,[this].concat(args)));(0,_defineProperty2.default)((0,_assertThisInitialized2.default)(_this),\"state\",{opacity:new _reactNative.Animated.Value(_this.props.visible?1:0)});return _this;}(0,_createClass2.default)(Badge,[{key:\"componentDidUpdate\",value:function componentDidUpdate(prevProps){var _this$props=this.props,visible=_this$props.visible,scale=_this$props.theme.animation.scale;if(visible!==prevProps.visible){_reactNative.Animated.timing(this.state.opacity,{toValue:visible?1:0,duration:150*scale,useNativeDriver:true}).start();}}},{key:\"render\",value:function render(){var _this$props2=this.props,children=_this$props2.children,_this$props2$size=_this$props2.size,size=_this$props2$size===void 0?defaultSize:_this$props2$size,style=_this$props2.style,theme=_this$props2.theme,visible=_this$props2.visible,rest=(0,_objectWithoutProperties2.default)(_this$props2,[\"children\",\"size\",\"style\",\"theme\",\"visible\"]);var opacity=this.state.opacity;var _ref=_reactNative.StyleSheet.flatten(style)||{},_ref$backgroundColor=_ref.backgroundColor,backgroundColor=_ref$backgroundColor===void 0?theme.colors.notification:_ref$backgroundColor,restStyle=(0,_objectWithoutProperties2.default)(_ref,[\"backgroundColor\"]);var textColor=(0,_color.default)(backgroundColor).isLight()?_colors.black:_colors.white;var borderRadius=size/2;return React.createElement(_reactNative.Animated.Text,(0,_extends2.default)({numberOfLines:1,style:[_objectSpread({opacity:opacity,backgroundColor:backgroundColor,color:textColor,fontSize:size*0.5},theme.fonts.regular,{lineHeight:size,height:size,minWidth:size,borderRadius:borderRadius}),styles.container,restStyle]},rest,{__source:{fileName:_jsxFileName,lineNumber:108}}),children);}}]);return Badge;}(React.Component);(0,_defineProperty2.default)(Badge,\"defaultProps\",{visible:true,size:defaultSize});var _default=(0,_theming.withTheme)(Badge);exports.default=_default;var styles=_reactNative.StyleSheet.create({container:{alignSelf:'flex-end',textAlign:'center',textAlignVertical:'center',paddingHorizontal:4,overflow:'hidden'}});","map":{"version":3,"sources":["Badge.tsx"],"names":["defaultSize","Badge","React","Component","visible","size","opacity","Animated","prevProps","scale","toValue","duration","useNativeDriver","children","style","theme","rest","backgroundColor","restStyle","StyleSheet","textColor","black","white","borderRadius","color","fontSize","lineHeight","height","minWidth","styles","container","alignSelf","textAlign","textAlignVertical","paddingHorizontal","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, StyleSheet, StyleProp, TextStyle } from 'react-native';\nimport color from 'color';\nimport { black, white } from '../styles/colors';\nimport { withTheme } from '../core/theming';\nimport { Theme } from '../types';\n\nconst defaultSize = 20;\n\ntype Props = React.ComponentProps<typeof Animated.Text> & {\n  /**\n   * Whether the badge is visible\n   */\n  visible: boolean;\n  /**\n   * Content of the `Badge`.\n   */\n  children?: string | number;\n  /**\n   * Size of the `Badge`.\n   */\n  size?: number;\n  style?: StyleProp<TextStyle>;\n  ref?: React.RefObject<typeof Animated.Text>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\ntype State = {\n  opacity: Animated.Value;\n};\n\n/**\n * Badges are small status descriptors for UI elements.\n * A badge consists of a small circle, typically containing a number or other short set of characters, that appears in proximity to another object.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/badge-1.png\" />\n *     <figcaption>Badge with content</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/badge-2.png\" />\n *     <figcaption>Badge without content</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Badge } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Badge>3</Badge>\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass Badge extends React.Component<Props, State> {\n  static defaultProps = {\n    visible: true,\n    size: defaultSize,\n  };\n\n  state = {\n    opacity: new Animated.Value(this.props.visible ? 1 : 0),\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    const {\n      visible,\n      theme: {\n        animation: { scale },\n      },\n    } = this.props;\n\n    if (visible !== prevProps.visible) {\n      Animated.timing(this.state.opacity, {\n        toValue: visible ? 1 : 0,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  }\n\n  render() {\n    const {\n      children,\n      size = defaultSize,\n      style,\n      theme,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      visible,\n      ...rest\n    } = this.props;\n    const { opacity } = this.state;\n\n    const { backgroundColor = theme.colors.notification, ...restStyle } =\n      StyleSheet.flatten(style) || {};\n    const textColor = color(backgroundColor).isLight() ? black : white;\n\n    const borderRadius = size / 2;\n\n    return (\n      <Animated.Text\n        numberOfLines={1}\n        style={[\n          {\n            opacity,\n            backgroundColor,\n            color: textColor,\n            fontSize: size * 0.5,\n            ...theme.fonts.regular,\n            lineHeight: size,\n            height: size,\n            minWidth: size,\n            borderRadius,\n          },\n          styles.container,\n          restStyle,\n        ]}\n        {...rest}\n      >\n        {children}\n      </Animated.Text>\n    );\n  }\n}\n\nexport default withTheme(Badge);\n\nconst styles = StyleSheet.create({\n  container: {\n    alignSelf: 'flex-end',\n    textAlign: 'center',\n    textAlignVertical: 'center',\n    paddingHorizontal: 4,\n    overflow: 'hidden',\n  },\n});\n"]},"metadata":{},"sourceType":"script"}